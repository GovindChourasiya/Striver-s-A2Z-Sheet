class Solution {
    public int solve(int[][] obstacleGrid, int row, int col, int[][] dp){
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        if(row >= n || col >= m || obstacleGrid[row][col] == 1){
            return 0;
        }
        if(row == n-1 && col == m-1){
            return 1;
        }
        if(dp[row][col] != -1){
            return dp[row][col];
        }
        
        return dp[row][col] = (solve(obstacleGrid,row+1,col,dp) + solve(obstacleGrid,row,col+1,dp));

    }
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length;
        int m = obstacleGrid[0].length;
        int[][] dp = new int[n+1][m+1];
        for(int[] arr : dp){
            Arrays.fill(arr,-1);
        }
        return solve(obstacleGrid,0,0,dp);
    }
}
