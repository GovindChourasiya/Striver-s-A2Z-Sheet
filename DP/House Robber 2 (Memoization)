class Solution {
    public int solve(int[] nums, int idx, int[] dp){
        if(idx == 0) return nums[0];
        if(idx < 0) return 0;
        if(dp[idx] != -1){
            return dp[idx];
        } 

        int pick = nums[idx] + solve(nums,idx-2,dp);
        int notPick = 0 + solve(nums,idx-1,dp);

        return dp[idx] = Math.max(pick,notPick);
    }
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 1) return nums[0];
        int[] dp1 = new int[n];
        int[] dp2 = new int[n];
        Arrays.fill(dp1,-1);
        Arrays.fill(dp2,-1);
        int arr1[] = new int[n-1];
        int arr2[] = new int[n-1];
        for(int i=0;i<n-1;i++){
            arr1[i] = nums[i];
        }
        for(int i=1;i<n;i++){
            arr2[i-1] = nums[i];
        }

        int ans1 = solve(arr1,arr1.length-1,dp1);
        int ans2 = solve(arr2,arr2.length-1,dp2);

        return Math.max(ans1,ans2);
    }
}
