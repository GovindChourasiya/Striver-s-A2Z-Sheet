class Solution {
    public boolean solve(int[] nums, int idx, int target, int[][] dp){
        if(target == 0) return true;
        if(idx == 0) return (nums[idx] == target);
        if(dp[idx][target] != -1){
            return dp[idx][target] == 1;
        }

        boolean notTake = solve(nums,idx-1,target,dp);

        boolean take = false;
        if(nums[idx] <= target){
            take = solve(nums,idx-1,target-nums[idx],dp);
        }
        boolean result = take || notTake;
        dp[idx][target] = result ? 1 : 0;
        return result;
    }
    public boolean canPartition(int[] nums) {
        int n = nums.length;
        int sum = 0;
        for(int num : nums){
            sum += num;
        }
        if(sum % 2 != 0) return false;
        int target = sum/2;
        int[][] dp = new int[n][target+1];
        for(int[] arr : dp){
            Arrays.fill(arr,-1);
        }

        return solve(nums,n-1,target,dp);
    }
}
