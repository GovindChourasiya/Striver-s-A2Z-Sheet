class Solution {
    static int solve(int val[], int wt[], int capacity, int idx, int[][] dp){
        if(capacity == 0){
            return 0;
        }
        if(idx == 0){
            if(wt[idx] <= capacity){
                return (capacity / wt[idx]) * val[idx];
            } else{
                return 0;
            }
        }
        if(dp[idx][capacity] != -1){
            return dp[idx][capacity];
        }
        int unpick = 0+solve(val,wt,capacity,idx-1,dp);
        
        int pick = Integer.MIN_VALUE;
        if(wt[idx] <= capacity){
            pick = val[idx] + solve(val,wt,capacity-wt[idx],idx,dp);
        }
        
        return dp[idx][capacity] = Math.max(pick,unpick);
    }
    static int knapSack(int val[], int wt[], int capacity){
        // code here
        int n = wt.length;
        int[][] dp = new int[n][capacity+1];
        for(int[] arr : dp){
            Arrays.fill(arr,-1);
        }
        return solve(val,wt,capacity,n-1,dp);
    }
}
