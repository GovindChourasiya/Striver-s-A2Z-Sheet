class Solution {
    String s1, s2;
    public int solve(String s1, String s2, int i, int j, int[][] dp){
        if(i < 0 || j < 0){
            return 0;
        }
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        if(s1.charAt(i) == s2.charAt(j)){
            dp[i][j] = 1+solve(s1,s2,i-1,j-1,dp);
        }else{
            dp[i][j] = Math.max(solve(s1,s2,i,j-1,dp),solve(s1,s2,i-1,j,dp));
        }

        return dp[i][j];
    }
    public int minInsertions(String s) {
        StringBuilder sb = new StringBuilder(s);
        String str = sb.reverse().toString();
        this.s1 = s;
        this.s2 = str;
        int n = s1.length();
        int m = s2.length();
        int[][] dp = new int[n+1][m+1];
        for(int arr[] : dp){
            Arrays.fill(arr,-1);
        }
        int palLen = solve(s1,s2,n-1,m-1,dp);

        return n-palLen;
    }
}
